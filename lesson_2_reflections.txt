What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates the .git folder with metadata. Git will need the metadata to
track the history of the contents and to know how this repository behaves.

How is the staging area different from the working directory and the repository? What value do
you think it offers?

The staging area is a virtual concept within Git, as opposed to the working directory which is a
more "physical" reflection of the file system. The repository is also virtual in a similar sense,
but it is much more permanent, whereas the staging area is temporary by design. The staging area
offers a chance to choose exactly what your commit will look like before it is set in stone.

How can you use the staging area to make sure you have one commit per logical change?

If your working directory contains more than one logical change, but no given file is affected
by more than one, the staging area allows you to gather only the files needed for each change one
at a time.

What are some situations when branches would be helpful in keeping your history organized? How
would branches help?

When I want to begin a large change that will not be ready for release for some time, but I still
want myself or others to be able to release smaller fixes quickly, I can create a separate branch
for the big project. Fast, urgent work can still be done on the master branch.

How do the diagrams help you visualize the branch structure?

The diagram shows me clearly which commit is each commit's parent. More importantly, it shows
which commit is the common parent of multiple commits on different branches--the branch point.
I imagine that will be a crucial detail to have in mind when the time comes to merge those
branches back together. It's also helpful that the diagram makes it obvious when a commit on one
branch is not reachable from a commit on another, so I know that those two commits probably have
distinct changes from the common parent that are unrelated to each other.

What is the result of merging two branches together? Why do we represent it in the diagram the way
we do?

After merging, the destination branch (master) contains all the changes it already had, combined
with all the changes that had been made in the coins branch. The diagram shows that the two lines
of changes were made independently, in parallel, and it shows which commit brought them together
for the first time.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The assumption that separate changes to a single file that are not near the same line are changes
that can be safely included together, which is what automatic merging does, is generally a good
one. It's also a situation that happens very frequently, so allowing Git to make that assumption
saves a lot of time. On the other hand, it's not 100% error-proof, so always merging manually and
carefully would ultimately be safer.
